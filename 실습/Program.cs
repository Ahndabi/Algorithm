using System.Drawing;
using System.Runtime.CompilerServices;

namespace 실습
{
	internal class Program
	{
		// 2. 이진탐색트리의 한계점과 극복방법 조사
		// 이진탐색트리의 접근, 탐색, 삽입, 삭제의 시간복잡도는 0(log n)으로 매우 효율적이다.
		// 트리의 높이에 의해 수행시간이 결정이 되며 트리는 계속 두 갈래로 나누어지기에 그에 기반한 시간복잡도이다.
		// 하지만 이 시간복잡도는 노드가 균형적인 트리형태가 된 경우에서 나온 계산이다.
		// 여기서 알 수 있는 이진탐색트리의 한계점은 불균형이 발생할 수도 있다는 점이다.
		// 만약 계속해서 큰 값만 추가되는 경우, 노드들이 한쪽 자식으로만 추가되기 때문에 불균형이 발생한다.
		// 이렇게 되면 탐색하는 영역이 절반으로 줄어들지 않기 때문에 시간복잡도는 O(n)에 가까워지고 효율적인 계산을 하기 어려워진다.
		// 이러한 현상을 막기 위한 대체 자료구조가 있다.
		// 그 자료구조는 자가균형기능을 가진 트리로 대표적으로 Red-Black Tree, AVL Tree 등이 있다.
		// 자가균형기능은 노드들이 한쪽 자식으로 쏠리는 현상을 막기 위해 우회전과 자회전 등의 방식을 사용하여 균형을 이루게 해주는 것이다.


		// 3. 이진탐색트리의 순회방법 조사와 순회순서
		// 먼저 트리기반 자료구조의 순회방법으로는 총 3가지가 있다. 
		// 전위순회, 중위순회, 후위순회가 그 방법이다.
		// 이름에서 나타나는 전 중 후는, 순회의 기준이 되는 노드의 순서가 된다.
		// 즉 전위순회는 노드 -> 왼쪽 -> 오른쪽 순서로, 기준이 되는 노드가 가장먼저 순회된다.
		// 중위순회는 왼쪽 -> 노드 -> 오른쪽 순서로, 기준이 되는 노드가 왼쪽 자식 노드 다음으로 순회된다.
		// 후회순회는 왼쪽 -> 오른쪽 -> 노드 순서로, 기준이 되는 노드가 가장 마지막으로 순회된다.
		// 여기서 이진탐색트리의 순회는 중위순회를 택하고 있다.
		// 그 이유는 이진탐색트리는 기본적으로 오름차순으로 정렬이 되는데 중위순회는 오름차순으로 정렬되기 때문이다.
	}
}